% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selpPredict.R
\name{predict.SELPCCA}
\alias{predict.SELPCCA}
\title{Prediction for out-of-sample data for SELPCCA predict}
\usage{
\method{predict}{SELPCCA}(object, newdata, newdata2, type = "response", ...)
}
\arguments{
\item{object}{A fitted model of class SELPCCA}

\item{newdata}{A matrix of size \eqn{n \times p} for the first dataset. Rows are
samples and columns are variables.}

\item{newdata2}{A matrix of size \eqn{n \times q} for the second dataset. Rows are
samples and columns are variables.}

\item{type}{See predict.glm() and predict.coxph() for type options and defaults.}

\item{...}{Additional arguments passed to predict.}
}
\value{
An object containing the output from predict.glm() or predict.coxph()
}
\description{
A wrapper function to obtain the canonical variates for
an out-of-sample dataset based on a fitted SELPCCA model and then use
that information to predict Y based on the fitted GLM or Cox model.
}
\examples{
\dontrun{
##---- read in data
data(sidaData)

Xdata1=sidaData[[1]][[1]]
Xdata2=sidaData[[1]][[2]]
Xtestdata1=sidaData[[3]][[1]]
Xtestdata2=sidaData[[3]][[2]]
Y=sidaData[[2]]-1

myresult=selpscca.pred(Xdata1, Xdata2, Y,fitselpCCA=NULL, family="binomial",
                      event=NULL,model.separately=FALSE, ncancorr=1,
                      CovStructure="Iden", isParallel=FALSE, ncores=NULL,
                      nfolds=5, ngrid=10, standardize=TRUE,thresh=0.0001,
                      maxiteration=20, showProgress=T)

#check output
train.correlation=myresult$selp.fit$maxcorr
optTau=myresult$selp.fit$optTau
hatalpha=myresult$selp.fit$hatalpha
hatbeta=myresult$selp.fit$hatbeta
predictionModel=summary(myresult$mod.fit)

##Performance metrics
##Train Performance Metrics
newPredictions=predict(myresult, newdata=Xdata1, newdata2=Xdata2, type="response")
Y.pred=newPredictions$pred.mod #predicted probabilities
Y.train=Y
train.metrics=PerformanceMetrics(Y.pred,Y.train,family='binomial',isPlot=TRUE)
print(train.metrics)

##Test Performance Metrics
Y.test=sidaData[[4]]-1
newPredictions=predict(myresult, newdata=Xtestdata1, newdata2=Xtestdata2, type="response")
Y.pred=newPredictions$pred.mod #predicted probabilities
test.metrics=PerformanceMetrics(Y.pred,Y.test,family='binomial',isPlot=TRUE)
print(test.metrics)
}
}
\seealso{
\code{\link{cvSIDA}}  \code{\link{sidatunerange}}
}
