% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sida.R
\name{sidatunerange}
\alias{sidatunerange}
\title{Tuning parameter grid values for sida}
\usage{
sidatunerange(
  Xdata,
  Y,
  ngrid = 10,
  standardize = TRUE,
  weight = 0.5,
  withCov = TRUE
)
}
\arguments{
\item{Xdata}{A list with each entry containing training views of size \eqn{n \times p_d},
where \eqn{d =1, \dots , D} views. Rows are samples and columns are variables. If
covariates are available, they should be included as a separate view, and
set as the last dataset. For binary or categorical covariates (assumes no
ordering), we suggest the use of indicator variables.}

\item{Y}{\eqn{n \times 1} vector of class membership. Numeric, coded as 1, 2, ....}

\item{ngrid}{Number of grid points for tuning parameters. Default is 10 for each
view if \eqn{D =2}. If \eqn{D > 2}, default is 5.}

\item{standardize}{TRUE or FALSE. If TRUE, data will be normalized to have mean zero
and variance one for each variable. Default is TRUE.}

\item{weight}{Balances separation and association. Default is 0.5.}

\item{withCov}{TRUE or FALSE if covariates are available. If TRUE, please set
all covariates as one dataset and should be the last dataset. For binary and
categorical variables, use indicator matrices/vectors. Default is FALSE.}
}
\value{
An R object containing the following information:
\item{Tauvec}{grid values for each data, not including covariates, if available.}
}
\description{
Sida function to provide tuning parameter grid values
 for each view, not including covariates, if available. It is
 recommended to use this to get lower and upper bounds of tuning
 parameters for each view that can be used in sida. This function is
 called by cvSIDA to select optimal tuning parameters.
}
\details{
The function will return an R object with grid values for each data,
 not including covariates, if available. To see the results, use the â€œ$" operator.
}
\examples{
\dontrun{
 #call sida
data(sidaData)
##---- call sida algorithm to estimate discriminant vectors, and predict on testing data

Xdata=sidaData[[1]]
Y=sidaData[[2]]
Xtestdata=sidaData[[3]]
Ytest=sidaData[[4]]

#call sidatunerange to get range of tuning parameter
ngrid=10
mytunerange=sidatunerange(Xdata,Y,ngrid,standardize=TRUE,weight=0.5,withCov=FALSE)

# an example with Tau set as the lower bound
Tau=c(mytunerange$Tauvec[[1]][1], mytunerange$Tauvec[[2]][1])
mysida=sida(Xdata,Y,Tau,withCov=FALSE,Xtestdata=Xtestdata,Ytest=Ytest,AssignClassMethod='Joint',
            plotIt=FALSE, standardize=TRUE,maxiteration=20,weight=0.5,thresh= 1e-03)

test.error=mysida$sidaerror
test.correlation=mysida$sidacorrelation

#estimated discriminant vectors and predicted class
hatalpha=mysida$hatalpha

predictedClass=mysida$PredictedClass
#obtain more performance metrics (applicable to two classes)

 #train metrics
 Y.pred=mysida$PredictedClass.train-1 #to get this in 0 and 1
 Y.train=Y-1 #to get this in 0 and 1
 train.metrics=PerformanceMetrics(Y.pred,Y.train,family='binomial')
 print(train.metrics)

 #obtain test predicted class
 Y.pred=mysida$PredictedClass-1 #to get this in 0 and 1
 Ytest.in=Ytest-1 #to get this in 0 and 1
 test.metrics=PerformanceMetrics(Y.pred,Ytest.in,family='binomial')
 print(test.metrics)
 }
}
\references{
Sandra E. Safo, Eun Jeong Min, and Lillian Haine (2022) , Sparse Linear
Discriminant Analysis for Multi-view Structured Data, Biometrics.
}
\seealso{
\code{\link{sida}}
}
