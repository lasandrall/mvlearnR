% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenericPlots.R
\name{networkPlot}
\alias{networkPlot}
\title{Network visualization of selected variables from integrative analysis methods}
\usage{
networkPlot(
  object,
  cutoff = NULL,
  color.node = NULL,
  lty.edge = c("solid", "dashed"),
  show.edge.labels = FALSE,
  show.color.key = TRUE,
  vertex.frame.color = "red",
  layout.fun = NULL,
  save = NULL,
  name.save = NULL
)
}
\arguments{
\item{object}{the output from SIDA, SIDANet, and SELPCCA methods}

\item{cutoff}{a vector containing  numeric values between 0 and 1 of similarity cutoff to use when
generating graphs. Length of vector is number of pairwise data combinations. Variable pairs with high
similarity measure may be of interest. The relevance of the associations can be explored by changing the cutoff.
This can also be used to reduce the size of the graph, for dense network. Default is 0.5 meaning that graph will only be generated
for variable pairs with similarity value greater than 0.5 for each data pair.}

\item{color.node}{vector of length two, specifying the colors of nodes for pairs of views. Defaults
to white and yellow.}

\item{lty.edge}{character vector of length 2, specifying the line type for edges with positive and negative weights, respectively.
Can be one of "solid", "dashed", "dotted", "dotdash", "longdash" and "twodash".
See igraph package for more details. Defaults to c("solid", "dashed"), where positive weights are solid lines, and negative weights are dashed lines.}

\item{show.edge.labels}{boolen indicating whether or not to show weights as edge labels.}

\item{show.color.key}{boolen indicating whether or not to show color key on plot. Defaults to TRUE.
Positive weights or similarity values (correlations) are indicated as red and negative values are indicated as green.}

\item{vertex.frame.color}{a character string of color to use as frame for nodes. Defaults to "red".}

\item{layout.fun}{a function, specifying how the vertices will be placed on the graph. Refer to igraph package using help(layout) for more details.
Default is layout.fruchterman.reingold.}

\item{save}{should the plot be saved? If so, choose one of these options: "jpeg", "tiff", "png" or "pdf"}

\item{name.save}{character string for the name of the file to be saved.}
}
\value{
A network graph for variables selected. Each list will contain similarity matrix, cutoff used, and indices of pairings.
\item{networkGraph}{a graph object for each pair of views (if more than two views) that can be interrogated in cytoscape}
\item{SimilarityMatrix}{ the similarity matrix used for generating the network for each pair of views}
\item{cutoff}{the cutoff used when generating network}
\item{pairs}{The pairs of views for which network(s) were generated}
}
\description{
Wrapper function to visualize  graph of similarity matrix for selected variables.
We estimate pairwise similarity matrix using low-dimensional representations of our
sparse integrative analysis methods (selpcca, sida, sidanet). We follow ideas in González et al. 2012
to create bipartite graph (bigraph) where variables or nodes from one view are connected to variables
or nodes from another view. We construct the bigraph from a pairwise similarity matrix obtained
from the outputs of our integrative analysis methods.  We estimate the similarity
score between a pair of selected variables from two views  by calculating the inner product of each selected variable
and the sum of canonical variates (for SELPCCA) or discriminant vectors (for SIDA, SIDANet) for the pairs of views.
As noted in González et al. 2012, the entries in the similarity matrix is a robust approximation of the Pearson correlation between pairs of variables
and the two views under consideration. This network graph
has potential to shed light on the complex associations between pairs of views.
}
\details{
The function will return D R objects, where D is the number of views. To see the results, use the “$" operator.
}
\examples{
\dontrun{
##---- load SIDA data
data("sidaData")
Xdata <- sidaData[[1]]
Y <- sidaData[[2]]
Xtestdata <- sidaData[[3]]
Ytest <- sidaData[[4]]
##---- call cross validation
mycv=cvSIDA(Xdata,Y,withCov=FALSE,plotIt=FALSE, Xtestdata=Xtestdata,
Ytest=Ytest, isParallel = FALSE)
##----  Obtain relevance network
networkPlot(mycv,cutoff=0.7)
}
}
\references{
Elise Palzer and Sandra E. Safo 2023. Submitted
González I., Lê Cao K-A., Davis, M.J. and Déjean, S. (2012).
Visualising associations between paired omics data sets. J. Data Mining 5:19.
}
